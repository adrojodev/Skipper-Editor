---
import Layout from "../layouts/Layout.astro";
import InteractionCard from "../components/InteractionCard.astro";
import Card from "../components/Card.astro";
import Header from "../components/Header.astro";
import InputContainer from "../components/InputContainer.astro";
import InputFieldAndButtonContainer from "../components/InputFieldAndButtonContainer";
import AddButton from "../components/AddButton";
import SaveSendButton from "../components/SaveSendButton";
import CancelButton from "../components/CancelButton";
import "../styles/inputs.css";

const contentUrl = `https://humankind-637da-default-rtdb.firebaseio.com/${Astro.url.pathname}.json`;
const response = await fetch(contentUrl);
const { interactions } = await response.json();
---

<Layout title="Skipper Bot">
  <script is:inline type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.11.0/firebase-app.js";
    import {
      getAuth,
      onAuthStateChanged,
    } from "https://www.gstatic.com/firebasejs/9.11.0/firebase-auth.js";

    const firebaseConfig = {
      apiKey: "AIzaSyCbDLF09yn8kxHXfnULe7fraIwXMdMEx4M",
      messagingSenderId: "707375406570",
      appId: "1:707375406570:web:7ddbf35bca0f36d1f62693",
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);

    onAuthStateChanged(auth, (user) => {
      if (user) {
        const email = user.email;
        const domain = email.substring(email.lastIndexOf("@") + 1);

        if (domain == "humankind.art") {
          document.body.style.overflow = "auto";
        } else {
          window.location.replace("https://humankind.art");
        }
      } else {
        window.location.replace("/login");
      }
    });
  </script>
  <Header headerSize="big" id="headerTitle">Skipper Bot ðŸ¦Š</Header>
  <Card id="inputCard">
    <Header headerSize="medium" id="cardHeader">New interaction âœ¨</Header>
    <InputContainer headerText="Interaction info">
      <input
        type="text"
        placeholder="Name"
        class="inputComponent"
        id="nameInput"
        onchange="deleteEmptyClassHome(this)"
      />
      <input
        type="text"
        placeholder="Description"
        class="inputComponent"
        id="descriptionInput"
        onchange="deleteEmptyClassHome(this)"
      />
    </InputContainer>
    <InputContainer headerText="Commands">
      <InputFieldAndButtonContainer
        typeOfInput="Command"
        isVisible="no"
        client:load
      />
      <AddButton iconUsed="add" innerText="Add command" client:idle />
    </InputContainer>
    <InputContainer headerText="Responses">
      <InputFieldAndButtonContainer
        typeOfInput="Response"
        isVisible="no"
        client:load
      />
      <AddButton iconUsed="add" innerText="Add response" client:idle />
    </InputContainer>
    <div class="inputAddButtons">
      <SaveSendButton
        client:load
        innerText="Create interaction"
        iconUsed=""
        buttonType="small"
      />
      <CancelButton client:load />
    </div>
  </Card>
  <SaveSendButton
    client:load
    innerText="New interaction"
    iconUsed="add"
    buttonType="normal"
  />
  <div class="interactionsListing">
    {
      Object.values(interactions).map(
        (interaction: {
          name: string;
          description: string;
          key: string;
          commands: string[];
          responses: string[];
        }) => {
          return (
            <InteractionCard
              id={interaction.key}
              title={interaction.name}
              description={interaction.description}
              commands={interaction.commands}
              responses={interaction.responses}
            />
          );
        }
      )
    }
  </div>
</Layout>

<style>
  .interactionsListing {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }
</style>
